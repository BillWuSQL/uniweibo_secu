<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.0.3.xsd">
  
    <http auto-config="true" create-session="never" > 
<!--         <intercept-url pattern="/welcome*" access="ROLE_USER" /> -->
<!-- 		<intercept-url pattern="/css/**" filters="none"/> -->
<!-- 		<intercept-url pattern="/js/**" filters="none"/> -->
		<intercept-url pattern="/login.jsp*" filters="none"/>
<!--         <intercept-url pattern="/login.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/> -->
		<intercept-url pattern="/**" access="ROLE_USER"/>
<!-- 		<form-login login-page='/login.jsp'/> -->
<!-- 		<form-login login-page='/login.htm' default-target-url='/home.htm' always-use-default-target='true'/> -->
		<session-management > <!--  invalid-session-url="/login_sessiontimeout.jsp" -->
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" /> 
		</session-management>
		
		<!--增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
<!-- 		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/> -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="myFilter"/>
    </http>
    
<!--     <authentication-manager> -->
<!-- 		<authentication-provider > -->
<!-- 			<user-service> -->
<!-- 				<user name="jimi" password="jimispassword" authorities="ROLE_USER, ROLE_ADMIN"/> -->
<!-- 				<user name="bob" password="bobspassword" authorities="ROLE_USER"/> -->
<!-- 			</user-service> -->
<!-- 		</authentication-provider> -->
<!-- 	</authentication-manager> -->
  	
	
	<!--
	一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
	所有控制将在这三个类中实现，解释详见具体配置
	-->
	<beans:bean id="myFilter" class="org.uniweibo.authen.common.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager"/>
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"/>
		<beans:property name="securityMetadataSource" ref="securityMetadataSource"/>
	</beans:bean>
	
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
		<!-- 如果用户的密码采用加密的话 <password-encoder hash="md5" />  -->
		</authentication-provider>
	</authentication-manager>
	
	<!-- 在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等-->
	<beans:bean id="myUserDetailService" class="org.uniweibo.authen.common.MyUserDetailService"/>
	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源  -->
	<beans:bean id="myAccessDecisionManagerBean" class="org.uniweibo.authen.common.MyAccessDecisionManager"/>
	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问  -->
	<beans:bean id="securityMetadataSource" class="org.uniweibo.authen.common.MyInvocationSecurityMetadataSource"/>
	
  	
  	
</beans:beans>